// -------------------------------------------------------------
// 
// File Name: D:\slsf_randgen\slsf\reportsneo\2024-03-07-15-43-51\Verilog_hdlsrc\sampleModel12940_sub\Subsystem.v
// Created: 2024-03-08 13:13:54
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk254                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel12940_sub/Subsystem
// Hierarchy Level: 0
// Model version: 1.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns
`include "cfblk18.v"
`include "cfblk57.v"
`include "DotProduct_block4.v"
`include "Increment_Real_World.v"
`include "cfblk36.v"
`include "DotProduct_block.v"
`include "cfblk84.v"
`include "cfblk260.v"
`include "cfblk2.v"
`include "Wrap_To_Zero_block.v"
`include "cfblk103.v"
`include "DotProduct_block3.v"
`include "cfblk266.v"
`include "cfblk109.v"
`include "cfblk258.v"
`include "cfblk47.v"
`include "DotProduct_block2.v"
`include "Wrap_To_Zero_block2.v"
`include "cfblk3.v"
`include "cfblk31.v"
`include "cfblk120.v"
`include "cfblk146.v"
`include "cfblk145.v"
`include "Nonpositive.v"
`include "cfblk1.v"
`include "DotProduct_block1.v"
`include "DotProduct_block6.v"
`include "cfblk263.v"
`include "DotProduct_block5.v"
`include "cfblk264.v"
`include "cfblk270.v"
`include "cfblk11.v"
`include "Wrap_To_Zero.v"
`include "DotProduct.v"
`include "cfblk35.v"
`include "cfblk210.v"
`include "cfblk158.v"
`include "Increment_Real_World_block2.v"
`include "cfblk265.v"
`include "cfblk173.v"
`include "cfblk262.v"
`include "cfblk212.v"
`include "cfblk231.v"
`include "Increment_Real_World_block.v"
`include "cfblk126.v"
`include "cfblk13.v"


module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk254,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk254;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk122_const_val_1;  // uint8
  wire [7:0] cfblk259_out1;  // uint8
  wire [7:0] cfblk83_const_val_1;  // uint8
  wire [7:0] cfblk99_const_val_1;  // uint8
  wire [7:0] cfblk257_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk73_out2;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk194_const_val_1;  // uint8
  wire [7:0] cfblk65_const_val_1;  // uint8
  wire [7:0] cfblk262_out1;  // uint8
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk191_const_val_1;  // uint8
  wire [7:0] cfblk30_const_val_1;  // uint8
  wire [7:0] cfblk168_const_val_1;  // uint8
  wire [7:0] cfblk258_out1;  // uint8
  wire [7:0] cfblk95_const_val_1;  // uint8
  wire [15:0] cfblk260_out1;  // uint16
  wire [31:0] dtc_out;  // ufix32
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk200_const_val_1;  // uint8
  wire [7:0] cfblk156_const_val_1;  // uint8
  wire [7:0] cfblk182_const_val_1;  // uint8
  wire [7:0] cfblk37_const_val_1;  // uint8
  wire [7:0] cfblk214_out1;  // uint8
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk44_out2;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk100_out2;  // uint8
  reg [7:0] cfblk309_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk309_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk309_out1;  // uint8
  wire [7:0] cfblk231_out1;  // uint8
  wire [7:0] cfblk177_out1;  // uint8
  reg [7:0] cfblk157_out1;  // uint8
  reg [7:0] cfblk303_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk303_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk303_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  reg [7:0] cfblk285_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk285_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk285_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk202_out1;  // uint8
  wire [7:0] cfblk204_out1;  // uint8
  wire [7:0] cfblk239_out1;  // uint8
  reg [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk200_out1;  // uint8
  wire [7:0] cfblk223_out1;  // uint8
  wire [7:0] cfblk213_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk212_out1;  // uint8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  reg [7:0] cfblk301_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk301_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk301_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk235_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk284_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk284_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk284_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  reg [7:0] cfblk300_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk300_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk300_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  reg [7:0] cfblk229_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk193_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk210_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk263_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk137_out1;  // uint8
  reg [7:0] cfblk283_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk283_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk283_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  reg [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk233_out1;  // uint8
  reg [7:0] cfblk298_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk298_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk298_out1;  // uint8
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk206_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  reg [7:0] cfblk286_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk286_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk286_out1;  // uint8
  wire cfblk7_relop1;
  reg [7:0] cfblk308_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk308_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk308_out1;  // uint8
  wire signed [31:0] cfblk104_sub_temp;  // sfix32
  wire signed [31:0] cfblk104_1;  // sfix32
  wire signed [31:0] cfblk104_2;  // sfix32
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk203_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk21_out2;  // uint8
  reg [7:0] cfblk287_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk287_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk287_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  reg [7:0] cfblk292_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk292_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk292_out1;  // uint8
  wire cfblk9_out1;  // ufix1
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] cfblk198_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk224_out1;  // uint8
  wire [7:0] cfblk214_out2;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  reg [7:0] cfblk296_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk296_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk296_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk270_out1;  // uint8
  reg [7:0] cfblk306_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk306_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk306_out1;  // uint8
  wire [7:0] cfblk160_out2;  // uint8
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk195_out1;  // uint8
  wire [7:0] cfblk265_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk236_out1;  // uint8
  reg [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk168_out1;  // uint8
  reg [7:0] cfblk289_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk289_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk289_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk191_out1;  // uint8
  wire [7:0] cfblk158_out1;  // uint8
  reg [7:0] cfblk297_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk297_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk297_out1;  // uint8
  wire [7:0] cfblk221_out1;  // uint8
  wire cfblk62_out1_is_not0;
  wire [7:0] cfblk108_out1;  // uint8
  wire [7:0] cfblk264_out1;  // uint8
  wire [7:0] cfblk42_out2;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk294_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk294_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk294_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk225_out1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk219_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk217_out1;  // uint8
  wire [7:0] cfblk185_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  reg [7:0] cfblk288_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk288_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk288_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk218_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk201_out1;  // uint8
  reg [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk194_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  reg [7:0] cfblk291_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk291_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk291_out1;  // uint8
  reg [7:0] cfblk242_out1;  // uint8
  reg [7:0] cfblk97_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk172_out2;  // uint8
  wire cfblk172_out2_is_not0;
  wire cfblk14_out1;
  reg  [1:0] cfblk295_reg;  // ufix1 [2]
  wire cfblk295_out1;
  reg [7:0] cfblk305_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk305_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk305_out1;  // uint8
  wire [7:0] cfblk159_out2;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  reg [7:0] cfblk311_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk311_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk311_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [31:0] cfblk251_add_temp;  // ufix32
  wire [31:0] cfblk251_1;  // ufix32
  wire [31:0] cfblk251_2;  // ufix32
  wire [7:0] cfblk251_out1;  // uint8
  reg [7:0] cfblk208_out1;  // uint8
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk66_out2;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [31:0] cfblk69_add_temp;  // ufix32
  wire [31:0] cfblk69_1;  // ufix32
  wire [31:0] cfblk69_2;  // ufix32
  wire [7:0] cfblk314_out1;  // uint8
  reg [7:0] cfblk299_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk299_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk299_out1;  // uint8
  wire [7:0] cfblk218_out2;  // uint8
  reg [7:0] cfblk228_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  reg [7:0] cfblk314_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk314_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk147_out1;  // uint8
  wire [7:0] cfblk266_out1;  // uint8
  reg [7:0] cfblk316_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk316_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk316_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [31:0] cfblk59_add_temp;  // ufix32
  wire [31:0] cfblk59_1;  // ufix32
  wire [31:0] cfblk59_2;  // ufix32
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk216_out1;  // uint8
  reg [7:0] cfblk293_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk293_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk293_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk192_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk64_out2;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  reg [7:0] cfblk302_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk302_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk302_out1;  // uint8
  wire [7:0] cfblk215_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  reg [7:0] cfblk247_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk164_out1;  // uint8
  reg [7:0] cfblk307_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk307_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk307_out1;  // uint8
  wire [7:0] cfblk209_out1;  // uint8
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  reg signed [31:0] cfblk309_t_0_0;  // int32
  reg signed [31:0] cfblk309_t_1;  // int32
  reg [8:0] cfblk157_div_temp;  // ufix9
  reg [8:0] cfblk157_t_0_0;  // ufix9
  reg signed [31:0] cfblk303_t_0_0;  // int32
  reg signed [31:0] cfblk303_t_1;  // int32
  reg signed [31:0] cfblk285_t_0_0;  // int32
  reg signed [31:0] cfblk285_t_1;  // int32
  reg [8:0] cfblk118_div_temp;  // ufix9
  reg [8:0] cfblk118_t_0_0;  // ufix9
  reg signed [31:0] cfblk301_t_0_0;  // int32
  reg signed [31:0] cfblk301_t_1;  // int32
  reg signed [31:0] cfblk284_t_0_0;  // int32
  reg signed [31:0] cfblk284_t_1;  // int32
  reg signed [31:0] cfblk300_t_0_0;  // int32
  reg signed [31:0] cfblk300_t_1;  // int32
  reg [8:0] cfblk229_div_temp;  // ufix9
  reg [8:0] cfblk229_t_0_0;  // ufix9
  reg signed [31:0] cfblk283_t_0_0;  // int32
  reg signed [31:0] cfblk283_t_1;  // int32
  reg [8:0] cfblk15_div_temp;  // ufix9
  reg [8:0] cfblk15_t_0_0;  // ufix9
  reg signed [31:0] cfblk298_t_0_0;  // int32
  reg signed [31:0] cfblk298_t_1;  // int32
  reg signed [31:0] cfblk286_t_0_0;  // int32
  reg signed [31:0] cfblk286_t_1;  // int32
  reg signed [31:0] cfblk308_t_0_0;  // int32
  reg signed [31:0] cfblk308_t_1;  // int32
  reg signed [31:0] cfblk287_t_0_0;  // int32
  reg signed [31:0] cfblk287_t_1;  // int32
  reg signed [31:0] cfblk292_t_0_0;  // int32
  reg signed [31:0] cfblk292_t_1;  // int32
  reg [8:0] cfblk198_div_temp;  // ufix9
  reg [8:0] cfblk198_t_0_0;  // ufix9
  reg signed [31:0] cfblk296_t_0_0;  // int32
  reg signed [31:0] cfblk296_t_1;  // int32
  reg signed [31:0] cfblk306_t_0_0;  // int32
  reg signed [31:0] cfblk306_t_1;  // int32
  reg [8:0] cfblk67_div_temp;  // ufix9
  reg [8:0] cfblk67_t_0_0;  // ufix9
  reg signed [31:0] cfblk289_t_0_0;  // int32
  reg signed [31:0] cfblk289_t_1;  // int32
  reg signed [31:0] cfblk297_t_0_0;  // int32
  reg signed [31:0] cfblk297_t_1;  // int32
  reg signed [31:0] cfblk294_t_0_0;  // int32
  reg signed [31:0] cfblk294_t_1;  // int32
  reg signed [31:0] cfblk288_t_0_0;  // int32
  reg signed [31:0] cfblk288_t_1;  // int32
  reg [8:0] cfblk105_div_temp;  // ufix9
  reg [8:0] cfblk105_t_0_0;  // ufix9
  reg signed [31:0] cfblk291_t_0_0;  // int32
  reg signed [31:0] cfblk291_t_1;  // int32
  reg [8:0] cfblk242_div_temp;  // ufix9
  reg [8:0] cfblk242_t_0_0;  // ufix9
  reg [8:0] cfblk97_div_temp;  // ufix9
  reg [8:0] cfblk97_t_0_0;  // ufix9
  reg signed [31:0] cfblk305_t_0_0;  // int32
  reg signed [31:0] cfblk305_t_1;  // int32
  reg signed [31:0] cfblk311_t_0_0;  // int32
  reg signed [31:0] cfblk311_t_1;  // int32
  reg [8:0] cfblk208_div_temp;  // ufix9
  reg [8:0] cfblk208_t_0_0;  // ufix9
  reg signed [31:0] cfblk299_t_0_0;  // int32
  reg signed [31:0] cfblk299_t_1;  // int32
  reg [8:0] cfblk228_div_temp;  // ufix9
  reg [8:0] cfblk228_t_0_0;  // ufix9
  reg signed [31:0] cfblk314_t_0_0;  // int32
  reg signed [31:0] cfblk314_t_1;  // int32
  reg signed [31:0] cfblk316_t_0_0;  // int32
  reg signed [31:0] cfblk316_t_1;  // int32
  reg signed [31:0] cfblk293_t_0_0;  // int32
  reg signed [31:0] cfblk293_t_1;  // int32
  reg signed [31:0] cfblk302_t_0_0;  // int32
  reg signed [31:0] cfblk302_t_1;  // int32
  reg [8:0] cfblk247_div_temp;  // ufix9
  reg [8:0] cfblk247_t_0_0;  // ufix9
  reg signed [31:0] cfblk307_t_0_0;  // int32
  reg signed [31:0] cfblk307_t_1;  // int32


  assign enb = clk_enable;

  assign cfblk122_const_val_1 = 8'b00000000;



  assign cfblk259_out1 = 8'b00000000;



  assign cfblk83_const_val_1 = 8'b00000000;



  assign cfblk99_const_val_1 = 8'b00000000;



  assign cfblk257_out1 = 8'b00000001;



  cfblk36 u_cfblk36 (.u(cfblk257_out1),  // uint8
                     .y(cfblk36_out1)  // uint8
                     );

  assign cfblk73_out1 = cfblk36_out1;
  assign cfblk73_out2 = 8'b00000000;



  assign cfblk61_out1 = (cfblk73_out2 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk194_const_val_1 = 8'b00000000;



  assign cfblk65_const_val_1 = 8'b00000000;



  cfblk262 u_cfblk262 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk262_out1)  // uint8
                       );

  assign cfblk179_out1 = (cfblk262_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk191_const_val_1 = 8'b00000000;



  assign cfblk30_const_val_1 = 8'b00000000;



  assign cfblk168_const_val_1 = 8'b00000000;



  cfblk258 u_cfblk258 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk258_out1)  // uint8
                       );

  assign cfblk95_const_val_1 = 8'b00000000;



  cfblk260 u_cfblk260 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .y(cfblk260_out1)  // uint16
                       );

  assign dtc_out = {16'b0, cfblk260_out1};



  assign cfblk151_out1 = dtc_out[7:0];



  assign cfblk200_const_val_1 = 8'b00000000;



  assign cfblk156_const_val_1 = 8'b00000000;



  assign cfblk182_const_val_1 = 8'b00000000;



  assign cfblk37_const_val_1 = 8'b00000000;



  assign cfblk182_out1 = cfblk214_out1 + cfblk182_const_val_1;



  assign cfblk156_out1 = cfblk44_out2 + cfblk156_const_val_1;



  assign cfblk100_out1 = cfblk156_out1;
  assign cfblk100_out2 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk309_process
      if (reset == 1'b1) begin
        for(cfblk309_t_1 = 32'sd0; cfblk309_t_1 <= 32'sd1; cfblk309_t_1 = cfblk309_t_1 + 32'sd1) begin
          cfblk309_reg[cfblk309_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk309_t_0_0 = 32'sd0; cfblk309_t_0_0 <= 32'sd1; cfblk309_t_0_0 = cfblk309_t_0_0 + 32'sd1) begin
            cfblk309_reg[cfblk309_t_0_0] <= cfblk309_reg_next[cfblk309_t_0_0];
          end
        end
      end
    end

  assign cfblk309_out1 = cfblk309_reg[1];
  assign cfblk309_reg_next[0] = cfblk100_out2;
  assign cfblk309_reg_next[1] = cfblk309_reg[0];



  always @(cfblk177_out1, cfblk231_out1) begin
    cfblk157_div_temp = 9'b000000000;
    cfblk157_t_0_0 = 9'b000000000;
    if (cfblk177_out1 == 8'b00000000) begin
      cfblk157_out1 = 8'b11111111;
    end
    else begin
      cfblk157_t_0_0 = {1'b0, cfblk231_out1};
      cfblk157_div_temp = cfblk157_t_0_0 / cfblk177_out1;
      if (cfblk157_div_temp[8] != 1'b0) begin
        cfblk157_out1 = 8'b11111111;
      end
      else begin
        cfblk157_out1 = cfblk157_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk303_process
      if (reset == 1'b1) begin
        for(cfblk303_t_1 = 32'sd0; cfblk303_t_1 <= 32'sd1; cfblk303_t_1 = cfblk303_t_1 + 32'sd1) begin
          cfblk303_reg[cfblk303_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk303_t_0_0 = 32'sd0; cfblk303_t_0_0 <= 32'sd1; cfblk303_t_0_0 = cfblk303_t_0_0 + 32'sd1) begin
            cfblk303_reg[cfblk303_t_0_0] <= cfblk303_reg_next[cfblk303_t_0_0];
          end
        end
      end
    end

  assign cfblk303_out1 = cfblk303_reg[1];
  assign cfblk303_reg_next[0] = cfblk157_out1;
  assign cfblk303_reg_next[1] = cfblk303_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk285_process
      if (reset == 1'b1) begin
        for(cfblk285_t_1 = 32'sd0; cfblk285_t_1 <= 32'sd1; cfblk285_t_1 = cfblk285_t_1 + 32'sd1) begin
          cfblk285_reg[cfblk285_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk285_t_0_0 = 32'sd0; cfblk285_t_0_0 <= 32'sd1; cfblk285_t_0_0 = cfblk285_t_0_0 + 32'sd1) begin
            cfblk285_reg[cfblk285_t_0_0] <= cfblk285_reg_next[cfblk285_t_0_0];
          end
        end
      end
    end

  assign cfblk285_out1 = cfblk285_reg[1];
  assign cfblk285_reg_next[0] = cfblk129_out1;
  assign cfblk285_reg_next[1] = cfblk285_reg[0];



  assign cfblk202_out1 = cfblk71_out1 + cfblk285_out1;



  assign cfblk239_out1 = cfblk202_out1 - cfblk204_out1;



  always @(cfblk239_out1, cfblk258_out1) begin
    cfblk118_div_temp = 9'b000000000;
    cfblk118_t_0_0 = 9'b000000000;
    if (cfblk239_out1 == 8'b00000000) begin
      cfblk118_out1 = 8'b11111111;
    end
    else begin
      cfblk118_t_0_0 = {1'b0, cfblk258_out1};
      cfblk118_div_temp = cfblk118_t_0_0 / cfblk239_out1;
      if (cfblk118_div_temp[8] != 1'b0) begin
        cfblk118_out1 = 8'b11111111;
      end
      else begin
        cfblk118_out1 = cfblk118_div_temp[7:0];
      end
    end
  end



  assign cfblk175_out1 = cfblk118_out1 + cfblk303_out1;



  assign cfblk200_out1 = cfblk175_out1 + cfblk200_const_val_1;



  assign cfblk213_out1 = cfblk151_out1 - cfblk223_out1;



  cfblk212 u_cfblk212 (.u(cfblk30_out1),  // uint8
                       .y(cfblk212_out1)  // uint8
                       );

  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk64_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk301_process
      if (reset == 1'b1) begin
        for(cfblk301_t_1 = 32'sd0; cfblk301_t_1 <= 32'sd1; cfblk301_t_1 = cfblk301_t_1 + 32'sd1) begin
          cfblk301_reg[cfblk301_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk301_t_0_0 = 32'sd0; cfblk301_t_0_0 <= 32'sd1; cfblk301_t_0_0 = cfblk301_t_0_0 + 32'sd1) begin
            cfblk301_reg[cfblk301_t_0_0] <= cfblk301_reg_next[cfblk301_t_0_0];
          end
        end
      end
    end

  assign cfblk301_out1 = cfblk301_reg[1];
  assign cfblk301_reg_next[0] = cfblk2_out1;
  assign cfblk301_reg_next[1] = cfblk301_reg[0];



  assign cfblk51_out1 = cfblk47_out1 + cfblk235_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk284_process
      if (reset == 1'b1) begin
        for(cfblk284_t_1 = 32'sd0; cfblk284_t_1 <= 32'sd1; cfblk284_t_1 = cfblk284_t_1 + 32'sd1) begin
          cfblk284_reg[cfblk284_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk284_t_0_0 = 32'sd0; cfblk284_t_0_0 <= 32'sd1; cfblk284_t_0_0 = cfblk284_t_0_0 + 32'sd1) begin
            cfblk284_reg[cfblk284_t_0_0] <= cfblk284_reg_next[cfblk284_t_0_0];
          end
        end
      end
    end

  assign cfblk284_out1 = cfblk284_reg[1];
  assign cfblk284_reg_next[0] = cfblk51_out1;
  assign cfblk284_reg_next[1] = cfblk284_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk300_process
      if (reset == 1'b1) begin
        for(cfblk300_t_1 = 32'sd0; cfblk300_t_1 <= 32'sd1; cfblk300_t_1 = cfblk300_t_1 + 32'sd1) begin
          cfblk300_reg[cfblk300_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk300_t_0_0 = 32'sd0; cfblk300_t_0_0 <= 32'sd1; cfblk300_t_0_0 = cfblk300_t_0_0 + 32'sd1) begin
            cfblk300_reg[cfblk300_t_0_0] <= cfblk300_reg_next[cfblk300_t_0_0];
          end
        end
      end
    end

  assign cfblk300_out1 = cfblk300_reg[1];
  assign cfblk300_reg_next[0] = cfblk69_out1;
  assign cfblk300_reg_next[1] = cfblk300_reg[0];



  always @(cfblk120_out1, cfblk142_out1) begin
    cfblk229_div_temp = 9'b000000000;
    cfblk229_t_0_0 = 9'b000000000;
    if (cfblk120_out1 == 8'b00000000) begin
      cfblk229_out1 = 8'b11111111;
    end
    else begin
      cfblk229_t_0_0 = {1'b0, cfblk142_out1};
      cfblk229_div_temp = cfblk229_t_0_0 / cfblk120_out1;
      if (cfblk229_div_temp[8] != 1'b0) begin
        cfblk229_out1 = 8'b11111111;
      end
      else begin
        cfblk229_out1 = cfblk229_div_temp[7:0];
      end
    end
  end



  cfblk31 u_cfblk31 (.u(cfblk229_out1),  // uint8
                     .y(cfblk31_out1)  // uint8
                     );

  assign dtc_out_1 = cfblk31_out1;



  assign cfblk76_out1 = dtc_out_1;



  assign cfblk116_out1 = cfblk193_out1 + cfblk76_out1;



  assign cfblk39_out1 = cfblk116_out1 - cfblk210_out1;



  cfblk263 u_cfblk263 (.In1(cfblk39_out1),  // uint8
                       .Out1(cfblk263_out1)  // uint8
                       );

  assign dtc_out_2 = cfblk263_out1;



  assign cfblk137_out1 = dtc_out_2;



  always @(posedge clk or posedge reset)
    begin : cfblk283_process
      if (reset == 1'b1) begin
        for(cfblk283_t_1 = 32'sd0; cfblk283_t_1 <= 32'sd1; cfblk283_t_1 = cfblk283_t_1 + 32'sd1) begin
          cfblk283_reg[cfblk283_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk283_t_0_0 = 32'sd0; cfblk283_t_0_0 <= 32'sd1; cfblk283_t_0_0 = cfblk283_t_0_0 + 32'sd1) begin
            cfblk283_reg[cfblk283_t_0_0] <= cfblk283_reg_next[cfblk283_t_0_0];
          end
        end
      end
    end

  assign cfblk283_out1 = cfblk283_reg[1];
  assign cfblk283_reg_next[0] = cfblk137_out1;
  assign cfblk283_reg_next[1] = cfblk283_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk283_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  always @(cfblk1_out1, cfblk300_out1) begin
    cfblk15_div_temp = 9'b000000000;
    cfblk15_t_0_0 = 9'b000000000;
    if (cfblk300_out1 == 8'b00000000) begin
      cfblk15_out1 = 8'b11111111;
    end
    else begin
      cfblk15_t_0_0 = {1'b0, cfblk1_out1};
      cfblk15_div_temp = cfblk15_t_0_0 / cfblk300_out1;
      if (cfblk15_div_temp[8] != 1'b0) begin
        cfblk15_out1 = 8'b11111111;
      end
      else begin
        cfblk15_out1 = cfblk15_div_temp[7:0];
      end
    end
  end



  assign cfblk235_out1 = cfblk15_out1 + cfblk284_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk298_process
      if (reset == 1'b1) begin
        for(cfblk298_t_1 = 32'sd0; cfblk298_t_1 <= 32'sd1; cfblk298_t_1 = cfblk298_t_1 + 32'sd1) begin
          cfblk298_reg[cfblk298_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk298_t_0_0 = 32'sd0; cfblk298_t_0_0 <= 32'sd1; cfblk298_t_0_0 = cfblk298_t_0_0 + 32'sd1) begin
            cfblk298_reg[cfblk298_t_0_0] <= cfblk298_reg_next[cfblk298_t_0_0];
          end
        end
      end
    end

  assign cfblk298_out1 = cfblk298_reg[1];
  assign cfblk298_reg_next[0] = cfblk233_out1;
  assign cfblk298_reg_next[1] = cfblk298_reg[0];



  assign cfblk53_out1 = cfblk173_out1 + cfblk298_out1;



  assign cfblk17_out1 = (cfblk53_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk206_out1 = (cfblk17_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk286_process
      if (reset == 1'b1) begin
        for(cfblk286_t_1 = 32'sd0; cfblk286_t_1 <= 32'sd1; cfblk286_t_1 = cfblk286_t_1 + 32'sd1) begin
          cfblk286_reg[cfblk286_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk286_t_0_0 = 32'sd0; cfblk286_t_0_0 <= 32'sd1; cfblk286_t_0_0 = cfblk286_t_0_0 + 32'sd1) begin
            cfblk286_reg[cfblk286_t_0_0] <= cfblk286_reg_next[cfblk286_t_0_0];
          end
        end
      end
    end

  assign cfblk286_out1 = cfblk286_reg[1];
  assign cfblk286_reg_next[0] = cfblk104_out1;
  assign cfblk286_reg_next[1] = cfblk286_reg[0];



  assign cfblk7_relop1 = cfblk286_out1 <= cfblk206_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk308_process
      if (reset == 1'b1) begin
        for(cfblk308_t_1 = 32'sd0; cfblk308_t_1 <= 32'sd1; cfblk308_t_1 = cfblk308_t_1 + 32'sd1) begin
          cfblk308_reg[cfblk308_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk308_t_0_0 = 32'sd0; cfblk308_t_0_0 <= 32'sd1; cfblk308_t_0_0 = cfblk308_t_0_0 + 32'sd1) begin
            cfblk308_reg[cfblk308_t_0_0] <= cfblk308_reg_next[cfblk308_t_0_0];
          end
        end
      end
    end

  assign cfblk308_out1 = cfblk308_reg[1];
  assign cfblk308_reg_next[0] = cfblk44_out2;
  assign cfblk308_reg_next[1] = cfblk308_reg[0];



  assign cfblk104_1 = {24'b0, cfblk308_out1};
  assign cfblk104_2 = {31'b0, cfblk7_relop1};
  assign cfblk104_sub_temp = cfblk104_1 - cfblk104_2;
  assign cfblk104_out1 = cfblk104_sub_temp[7:0];



  assign cfblk203_out1 = cfblk106_out1 - cfblk104_out1;



  assign cfblk21_out1 = cfblk203_out1;
  assign cfblk21_out2 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk287_process
      if (reset == 1'b1) begin
        for(cfblk287_t_1 = 32'sd0; cfblk287_t_1 <= 32'sd1; cfblk287_t_1 = cfblk287_t_1 + 32'sd1) begin
          cfblk287_reg[cfblk287_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk287_t_0_0 = 32'sd0; cfblk287_t_0_0 <= 32'sd1; cfblk287_t_0_0 = cfblk287_t_0_0 + 32'sd1) begin
            cfblk287_reg[cfblk287_t_0_0] <= cfblk287_reg_next[cfblk287_t_0_0];
          end
        end
      end
    end

  assign cfblk287_out1 = cfblk287_reg[1];
  assign cfblk287_reg_next[0] = cfblk21_out1;
  assign cfblk287_reg_next[1] = cfblk287_reg[0];



  DotProduct_block4 u_cfblk63_inst (.in1(cfblk287_out1),  // uint8
                                    .in2(cfblk235_out1),  // uint8
                                    .out1(cfblk63_out1)  // uint8
                                    );

  cfblk145 u_cfblk145 (.u(cfblk63_out1),  // uint8
                       .y(cfblk145_out1)  // uint8
                       );

  assign cfblk95_out1 = cfblk145_out1 + cfblk95_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk292_process
      if (reset == 1'b1) begin
        for(cfblk292_t_1 = 32'sd0; cfblk292_t_1 <= 32'sd1; cfblk292_t_1 = cfblk292_t_1 + 32'sd1) begin
          cfblk292_reg[cfblk292_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk292_t_0_0 = 32'sd0; cfblk292_t_0_0 <= 32'sd1; cfblk292_t_0_0 = cfblk292_t_0_0 + 32'sd1) begin
            cfblk292_reg[cfblk292_t_0_0] <= cfblk292_reg_next[cfblk292_t_0_0];
          end
        end
      end
    end

  assign cfblk292_out1 = cfblk292_reg[1];
  assign cfblk292_reg_next[0] = cfblk139_out1;
  assign cfblk292_reg_next[1] = cfblk292_reg[0];



  assign cfblk106_out1 = {7'b0, cfblk9_out1};



  cfblk57 u_cfblk57 (.u(cfblk106_out1),  // uint8
                     .y(cfblk57_out1)  // uint8
                     );

  always @(cfblk57_out1, cfblk58_out1) begin
    cfblk198_div_temp = 9'b000000000;
    cfblk198_t_0_0 = 9'b000000000;
    if (cfblk58_out1 == 8'b00000000) begin
      cfblk198_out1 = 8'b11111111;
    end
    else begin
      cfblk198_t_0_0 = {1'b0, cfblk57_out1};
      cfblk198_div_temp = cfblk198_t_0_0 / cfblk58_out1;
      if (cfblk198_div_temp[8] != 1'b0) begin
        cfblk198_out1 = 8'b11111111;
      end
      else begin
        cfblk198_out1 = cfblk198_div_temp[7:0];
      end
    end
  end



  assign cfblk224_out1 = cfblk198_out1 - cfblk83_out1;



  assign cfblk112_out1 = cfblk224_out1 + cfblk214_out2;



  always @(posedge clk or posedge reset)
    begin : cfblk296_process
      if (reset == 1'b1) begin
        for(cfblk296_t_1 = 32'sd0; cfblk296_t_1 <= 32'sd1; cfblk296_t_1 = cfblk296_t_1 + 32'sd1) begin
          cfblk296_reg[cfblk296_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk296_t_0_0 = 32'sd0; cfblk296_t_0_0 <= 32'sd1; cfblk296_t_0_0 = cfblk296_t_0_0 + 32'sd1) begin
            cfblk296_reg[cfblk296_t_0_0] <= cfblk296_reg_next[cfblk296_t_0_0];
          end
        end
      end
    end

  assign cfblk296_out1 = cfblk296_reg[1];
  assign cfblk296_reg_next[0] = cfblk112_out1;
  assign cfblk296_reg_next[1] = cfblk296_reg[0];



  cfblk270 u_cfblk270 (.In1(cfblk38_out1),  // uint8
                       .Out1(cfblk270_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk306_process
      if (reset == 1'b1) begin
        for(cfblk306_t_1 = 32'sd0; cfblk306_t_1 <= 32'sd1; cfblk306_t_1 = cfblk306_t_1 + 32'sd1) begin
          cfblk306_reg[cfblk306_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk306_t_0_0 = 32'sd0; cfblk306_t_0_0 <= 32'sd1; cfblk306_t_0_0 = cfblk306_t_0_0 + 32'sd1) begin
            cfblk306_reg[cfblk306_t_0_0] <= cfblk306_reg_next[cfblk306_t_0_0];
          end
        end
      end
    end

  assign cfblk306_out1 = cfblk306_reg[1];
  assign cfblk306_reg_next[0] = cfblk270_out1;
  assign cfblk306_reg_next[1] = cfblk306_reg[0];



  assign cfblk32_out1 = cfblk160_out2 + cfblk181_out1;



  assign cfblk195_out1 = (cfblk32_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk107_out1 = cfblk195_out1 + cfblk265_out1;



  assign cfblk223_out1 = cfblk19_out1 + cfblk236_out1;



  always @(cfblk107_out1, cfblk223_out1) begin
    cfblk67_div_temp = 9'b000000000;
    cfblk67_t_0_0 = 9'b000000000;
    if (cfblk107_out1 == 8'b00000000) begin
      cfblk67_out1 = 8'b11111111;
    end
    else begin
      cfblk67_t_0_0 = {1'b0, cfblk223_out1};
      cfblk67_div_temp = cfblk67_t_0_0 / cfblk107_out1;
      if (cfblk67_div_temp[8] != 1'b0) begin
        cfblk67_out1 = 8'b11111111;
      end
      else begin
        cfblk67_out1 = cfblk67_div_temp[7:0];
      end
    end
  end



  assign cfblk168_out1 = cfblk67_out1 + cfblk168_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk289_process
      if (reset == 1'b1) begin
        for(cfblk289_t_1 = 32'sd0; cfblk289_t_1 <= 32'sd1; cfblk289_t_1 = cfblk289_t_1 + 32'sd1) begin
          cfblk289_reg[cfblk289_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk289_t_0_0 = 32'sd0; cfblk289_t_0_0 <= 32'sd1; cfblk289_t_0_0 = cfblk289_t_0_0 + 32'sd1) begin
            cfblk289_reg[cfblk289_t_0_0] <= cfblk289_reg_next[cfblk289_t_0_0];
          end
        end
      end
    end

  assign cfblk289_out1 = cfblk289_reg[1];
  assign cfblk289_reg_next[0] = cfblk168_out1;
  assign cfblk289_reg_next[1] = cfblk289_reg[0];



  cfblk35 u_cfblk35 (.u(cfblk92_out1),  // uint8
                     .y(cfblk35_out1)  // uint8
                     );

  assign cfblk191_out1 = cfblk35_out1 + cfblk191_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk297_process
      if (reset == 1'b1) begin
        for(cfblk297_t_1 = 32'sd0; cfblk297_t_1 <= 32'sd1; cfblk297_t_1 = cfblk297_t_1 + 32'sd1) begin
          cfblk297_reg[cfblk297_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk297_t_0_0 = 32'sd0; cfblk297_t_0_0 <= 32'sd1; cfblk297_t_0_0 = cfblk297_t_0_0 + 32'sd1) begin
            cfblk297_reg[cfblk297_t_0_0] <= cfblk297_reg_next[cfblk297_t_0_0];
          end
        end
      end
    end

  assign cfblk297_out1 = cfblk297_reg[1];
  assign cfblk297_reg_next[0] = cfblk158_out1;
  assign cfblk297_reg_next[1] = cfblk297_reg[0];



  assign cfblk62_out1_is_not0 = cfblk221_out1 != 8'b00000000;



  cfblk264 u_cfblk264 (.In1(cfblk108_out1),  // uint8
                       .Out1(cfblk264_out1)  // uint8
                       );

  assign cfblk154_out1 = cfblk264_out1 + cfblk42_out2;



  cfblk84 u_cfblk84 (.u(cfblk154_out1),  // uint8
                     .y(cfblk84_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk294_process
      if (reset == 1'b1) begin
        for(cfblk294_t_1 = 32'sd0; cfblk294_t_1 <= 32'sd1; cfblk294_t_1 = cfblk294_t_1 + 32'sd1) begin
          cfblk294_reg[cfblk294_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk294_t_0_0 = 32'sd0; cfblk294_t_0_0 <= 32'sd1; cfblk294_t_0_0 = cfblk294_t_0_0 + 32'sd1) begin
            cfblk294_reg[cfblk294_t_0_0] <= cfblk294_reg_next[cfblk294_t_0_0];
          end
        end
      end
    end

  assign cfblk294_out1 = cfblk294_reg[1];
  assign cfblk294_reg_next[0] = cfblk84_out1;
  assign cfblk294_reg_next[1] = cfblk294_reg[0];



  assign cfblk49_out1 = (cfblk44_out2 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_3 = cfblk49_out1;



  assign cfblk40_out1 = dtc_out_3;



  assign cfblk38_out1 = (cfblk40_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk150_out1 = (cfblk225_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk134_out1 = cfblk150_out1 - cfblk38_out1;



  assign dtc_out_4 = cfblk134_out1;



  assign cfblk123_out1 = dtc_out_4;



  assign cfblk79_out1 = cfblk123_out1 + cfblk92_out1;



  assign cfblk219_out1 = cfblk259_out1 - cfblk58_out1;



  DotProduct_block u_cfblk152_inst (.in1(cfblk219_out1),  // uint8
                                    .in2(cfblk79_out1),  // uint8
                                    .out1(cfblk152_out1)  // uint8
                                    );

  assign cfblk185_out1 = cfblk217_out1 + cfblk152_out1;



  assign dtc_out_5 = cfblk185_out1;



  assign cfblk165_out1 = dtc_out_5;



  cfblk210 u_cfblk210 (.u(cfblk165_out1),  // uint8
                       .y(cfblk210_out1)  // uint8
                       );

  assign cfblk82_out1 = cfblk66_out1 + cfblk142_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk288_process
      if (reset == 1'b1) begin
        for(cfblk288_t_1 = 32'sd0; cfblk288_t_1 <= 32'sd1; cfblk288_t_1 = cfblk288_t_1 + 32'sd1) begin
          cfblk288_reg[cfblk288_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk288_t_0_0 = 32'sd0; cfblk288_t_0_0 <= 32'sd1; cfblk288_t_0_0 = cfblk288_t_0_0 + 32'sd1) begin
            cfblk288_reg[cfblk288_t_0_0] <= cfblk288_reg_next[cfblk288_t_0_0];
          end
        end
      end
    end

  assign cfblk288_out1 = cfblk288_reg[1];
  assign cfblk288_reg_next[0] = cfblk265_out1;
  assign cfblk288_reg_next[1] = cfblk288_reg[0];



  assign cfblk50_out1 = cfblk288_out1 + cfblk82_out1;



  assign cfblk71_out1 = cfblk179_out1 + cfblk50_out1;



  assign cfblk141_out1 = (cfblk28_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk42_out1 = cfblk19_out1;
  assign cfblk42_out2 = 8'b00000000;



  cfblk265 u_cfblk265 (.In1(cfblk172_out1),  // uint8
                       .Out1(cfblk265_out1)  // uint8
                       );

  assign cfblk160_out1 = cfblk265_out1;
  assign cfblk160_out2 = 8'b00000000;



  assign cfblk83_out1 = cfblk218_out1 + cfblk83_const_val_1;



  cfblk103 u_cfblk103 (.u(cfblk83_out1),  // uint8
                       .y(cfblk103_out1)  // uint8
                       );

  assign cfblk181_out1 = cfblk103_out1 + cfblk160_out1;



  assign cfblk170_out1 = cfblk181_out1 - cfblk42_out2;



  assign cfblk99_out1 = cfblk170_out1 + cfblk99_const_val_1;



  assign cfblk201_out1 = cfblk99_out1 + cfblk61_out1;



  always @(cfblk141_out1, cfblk201_out1) begin
    cfblk105_div_temp = 9'b000000000;
    cfblk105_t_0_0 = 9'b000000000;
    if (cfblk141_out1 == 8'b00000000) begin
      cfblk105_out1 = 8'b11111111;
    end
    else begin
      cfblk105_t_0_0 = {1'b0, cfblk201_out1};
      cfblk105_div_temp = cfblk105_t_0_0 / cfblk141_out1;
      if (cfblk105_div_temp[8] != 1'b0) begin
        cfblk105_out1 = 8'b11111111;
      end
      else begin
        cfblk105_out1 = cfblk105_div_temp[7:0];
      end
    end
  end



  assign cfblk194_out1 = cfblk105_out1 + cfblk194_const_val_1;



  assign cfblk65_out1 = cfblk194_out1 + cfblk65_const_val_1;



  assign cfblk139_out1 = cfblk65_out1 + cfblk71_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk291_process
      if (reset == 1'b1) begin
        for(cfblk291_t_1 = 32'sd0; cfblk291_t_1 <= 32'sd1; cfblk291_t_1 = cfblk291_t_1 + 32'sd1) begin
          cfblk291_reg[cfblk291_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk291_t_0_0 = 32'sd0; cfblk291_t_0_0 <= 32'sd1; cfblk291_t_0_0 = cfblk291_t_0_0 + 32'sd1) begin
            cfblk291_reg[cfblk291_t_0_0] <= cfblk291_reg_next[cfblk291_t_0_0];
          end
        end
      end
    end

  assign cfblk291_out1 = cfblk291_reg[1];
  assign cfblk291_reg_next[0] = cfblk139_out1;
  assign cfblk291_reg_next[1] = cfblk291_reg[0];



  assign cfblk193_out1 = cfblk291_out1 + cfblk210_out1;



  cfblk158 u_cfblk158 (.u(cfblk193_out1),  // uint8
                       .y(cfblk158_out1)  // uint8
                       );

  always @(cfblk158_out1, cfblk73_out1) begin
    cfblk242_div_temp = 9'b000000000;
    cfblk242_t_0_0 = 9'b000000000;
    if (cfblk73_out1 == 8'b00000000) begin
      cfblk242_out1 = 8'b11111111;
    end
    else begin
      cfblk242_t_0_0 = {1'b0, cfblk158_out1};
      cfblk242_div_temp = cfblk242_t_0_0 / cfblk73_out1;
      if (cfblk242_div_temp[8] != 1'b0) begin
        cfblk242_out1 = 8'b11111111;
      end
      else begin
        cfblk242_out1 = cfblk242_div_temp[7:0];
      end
    end
  end



  always @(cfblk242_out1, cfblk294_out1) begin
    cfblk97_div_temp = 9'b000000000;
    cfblk97_t_0_0 = 9'b000000000;
    if (cfblk294_out1 == 8'b00000000) begin
      cfblk97_out1 = 8'b11111111;
    end
    else begin
      cfblk97_t_0_0 = {1'b0, cfblk242_out1};
      cfblk97_div_temp = cfblk97_t_0_0 / cfblk294_out1;
      if (cfblk97_div_temp[8] != 1'b0) begin
        cfblk97_out1 = 8'b11111111;
      end
      else begin
        cfblk97_out1 = cfblk97_div_temp[7:0];
      end
    end
  end



  assign dtc_out_6 = cfblk97_out1;



  assign cfblk131_out1 = dtc_out_6;



  assign cfblk172_out1 = cfblk131_out1;
  assign cfblk172_out2 = 8'b00000000;



  assign cfblk172_out2_is_not0 = cfblk172_out2 != 8'b00000000;



  assign cfblk14_out1 = cfblk172_out2_is_not0 & cfblk62_out1_is_not0;



  always @(posedge clk or posedge reset)
    begin : cfblk295_process
      if (reset == 1'b1) begin
        cfblk295_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          cfblk295_reg[0] <= cfblk14_out1;
          cfblk295_reg[1] <= cfblk295_reg[0];
        end
      end
    end

  assign cfblk295_out1 = cfblk295_reg[1];



  always @(posedge clk or posedge reset)
    begin : cfblk305_process
      if (reset == 1'b1) begin
        for(cfblk305_t_1 = 32'sd0; cfblk305_t_1 <= 32'sd1; cfblk305_t_1 = cfblk305_t_1 + 32'sd1) begin
          cfblk305_reg[cfblk305_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk305_t_0_0 = 32'sd0; cfblk305_t_0_0 <= 32'sd1; cfblk305_t_0_0 = cfblk305_t_0_0 + 32'sd1) begin
            cfblk305_reg[cfblk305_t_0_0] <= cfblk305_reg_next[cfblk305_t_0_0];
          end
        end
      end
    end

  assign cfblk305_out1 = cfblk305_reg[1];
  assign cfblk305_reg_next[0] = cfblk214_out1;
  assign cfblk305_reg_next[1] = cfblk305_reg[0];



  cfblk109 u_cfblk109 (.u(cfblk159_out2),  // uint8
                       .y(cfblk109_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk311_process
      if (reset == 1'b1) begin
        for(cfblk311_t_1 = 32'sd0; cfblk311_t_1 <= 32'sd1; cfblk311_t_1 = cfblk311_t_1 + 32'sd1) begin
          cfblk311_reg[cfblk311_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk311_t_0_0 = 32'sd0; cfblk311_t_0_0 <= 32'sd1; cfblk311_t_0_0 = cfblk311_t_0_0 + 32'sd1) begin
            cfblk311_reg[cfblk311_t_0_0] <= cfblk311_reg_next[cfblk311_t_0_0];
          end
        end
      end
    end

  assign cfblk311_out1 = cfblk311_reg[1];
  assign cfblk311_reg_next[0] = cfblk109_out1;
  assign cfblk311_reg_next[1] = cfblk311_reg[0];



  cfblk47 u_cfblk47 (.u(cfblk28_out1),  // uint8
                     .y(cfblk47_out1)  // uint8
                     );

  assign cfblk138_out1 = cfblk47_out1 - cfblk311_out1;



  DotProduct_block3 u_cfblk221_inst (.in1(cfblk138_out1),  // uint8
                                     .in2(cfblk259_out1),  // uint8
                                     .out1(cfblk221_out1)  // uint8
                                     );

  assign cfblk108_out1 = cfblk221_out1 - cfblk305_out1;



  assign cfblk251_1 = {24'b0, cfblk108_out1};
  assign cfblk251_2 = {31'b0, cfblk295_out1};
  assign cfblk251_add_temp = cfblk251_1 + cfblk251_2;
  assign cfblk251_out1 = cfblk251_add_temp[7:0];



  always @(cfblk251_out1, cfblk297_out1) begin
    cfblk208_div_temp = 9'b000000000;
    cfblk208_t_0_0 = 9'b000000000;
    if (cfblk297_out1 == 8'b00000000) begin
      cfblk208_out1 = 8'b11111111;
    end
    else begin
      cfblk208_t_0_0 = {1'b0, cfblk251_out1};
      cfblk208_div_temp = cfblk208_t_0_0 / cfblk297_out1;
      if (cfblk208_div_temp[8] != 1'b0) begin
        cfblk208_out1 = 8'b11111111;
      end
      else begin
        cfblk208_out1 = cfblk208_div_temp[7:0];
      end
    end
  end



  assign cfblk180_out1 = (cfblk208_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk66_out1 = cfblk180_out1;
  assign cfblk66_out2 = 8'b00000000;



  cfblk18 u_cfblk18 (.u(cfblk66_out2),  // uint8
                     .y(cfblk18_out1)  // uint8
                     );

  assign cfblk9_out1 = (&cfblk18_out1[7:0]);



  assign cfblk69_1 = {31'b0, cfblk9_out1};
  assign cfblk69_2 = {24'b0, cfblk191_out1};
  assign cfblk69_add_temp = cfblk69_1 + cfblk69_2;
  assign cfblk69_out1 = cfblk69_add_temp[7:0];



  assign cfblk233_out1 = cfblk69_out1 + cfblk314_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk299_process
      if (reset == 1'b1) begin
        for(cfblk299_t_1 = 32'sd0; cfblk299_t_1 <= 32'sd1; cfblk299_t_1 = cfblk299_t_1 + 32'sd1) begin
          cfblk299_reg[cfblk299_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk299_t_0_0 = 32'sd0; cfblk299_t_0_0 <= 32'sd1; cfblk299_t_0_0 = cfblk299_t_0_0 + 32'sd1) begin
            cfblk299_reg[cfblk299_t_0_0] <= cfblk299_reg_next[cfblk299_t_0_0];
          end
        end
      end
    end

  assign cfblk299_out1 = cfblk299_reg[1];
  assign cfblk299_reg_next[0] = cfblk233_out1;
  assign cfblk299_reg_next[1] = cfblk299_reg[0];



  cfblk120 u_cfblk120 (.u(cfblk218_out2),  // uint8
                       .y(cfblk120_out1)  // uint8
                       );

  always @(cfblk120_out1) begin
    cfblk228_div_temp = 9'b000000000;
    cfblk228_t_0_0 = 9'b000000000;
    if (cfblk120_out1 == 8'b00000000) begin
      cfblk228_out1 = 8'b11111111;
    end
    else begin
      cfblk228_t_0_0 = {1'b0, cfblk120_out1};
      cfblk228_div_temp = cfblk228_t_0_0 / cfblk120_out1;
      if (cfblk228_div_temp[8] != 1'b0) begin
        cfblk228_out1 = 8'b11111111;
      end
      else begin
        cfblk228_out1 = cfblk228_div_temp[7:0];
      end
    end
  end



  assign cfblk122_out1 = cfblk228_out1 + cfblk122_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk314_process
      if (reset == 1'b1) begin
        for(cfblk314_t_1 = 32'sd0; cfblk314_t_1 <= 32'sd1; cfblk314_t_1 = cfblk314_t_1 + 32'sd1) begin
          cfblk314_reg[cfblk314_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk314_t_0_0 = 32'sd0; cfblk314_t_0_0 <= 32'sd1; cfblk314_t_0_0 = cfblk314_t_0_0 + 32'sd1) begin
            cfblk314_reg[cfblk314_t_0_0] <= cfblk314_reg_next[cfblk314_t_0_0];
          end
        end
      end
    end

  assign cfblk314_out1 = cfblk314_reg[1];
  assign cfblk314_reg_next[0] = cfblk122_out1;
  assign cfblk314_reg_next[1] = cfblk314_reg[0];



  assign cfblk58_out1 = cfblk314_out1 - cfblk299_out1;



  assign cfblk30_out1 = cfblk58_out1 + cfblk30_const_val_1;



  DotProduct_block5 u_cfblk81_inst (.in1(cfblk30_out1),  // uint8
                                    .in2(cfblk289_out1),  // uint8
                                    .out1(cfblk81_out1)  // uint8
                                    );

  DotProduct_block6 u_cfblk94_inst (.in1(cfblk81_out1),  // uint8
                                    .in2(cfblk306_out1),  // uint8
                                    .out1(cfblk94_out1)  // uint8
                                    );

  assign dtc_out_7 = cfblk94_out1;



  assign cfblk142_out1 = dtc_out_7;



  assign cfblk147_out1 = cfblk142_out1 - cfblk258_out1;



  cfblk266 u_cfblk266 (.In1(cfblk19_out1),  // uint8
                       .Out1(cfblk266_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk316_process
      if (reset == 1'b1) begin
        for(cfblk316_t_1 = 32'sd0; cfblk316_t_1 <= 32'sd1; cfblk316_t_1 = cfblk316_t_1 + 32'sd1) begin
          cfblk316_reg[cfblk316_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk316_t_0_0 = 32'sd0; cfblk316_t_0_0 <= 32'sd1; cfblk316_t_0_0 = cfblk316_t_0_0 + 32'sd1) begin
            cfblk316_reg[cfblk316_t_0_0] <= cfblk316_reg_next[cfblk316_t_0_0];
          end
        end
      end
    end

  assign cfblk316_out1 = cfblk316_reg[1];
  assign cfblk316_reg_next[0] = cfblk266_out1;
  assign cfblk316_reg_next[1] = cfblk316_reg[0];



  assign cfblk204_out1 = cfblk316_out1 + cfblk147_out1;



  assign cfblk111_out1 = cfblk204_out1 + cfblk296_out1;



  DotProduct_block1 u_cfblk19_inst (.in1(cfblk111_out1),  // uint8
                                    .in2(cfblk292_out1),  // uint8
                                    .out1(cfblk19_out1)  // uint8
                                    );

  assign dtc_out_8 = cfblk19_out1;



  assign cfblk28_out1 = dtc_out_8;



  assign cfblk236_out1 = cfblk28_out1 - cfblk95_out1;



  assign cfblk218_out1 = cfblk236_out1;
  assign cfblk218_out2 = 8'b00000000;



  assign cfblk59_1 = {24'b0, cfblk218_out2};
  assign cfblk59_2 = {31'b0, cfblk7_relop1};
  assign cfblk59_add_temp = cfblk59_1 + cfblk59_2;
  assign cfblk59_out1 = cfblk59_add_temp[7:0];



  DotProduct_block2 u_cfblk216_inst (.in1(cfblk59_out1),  // uint8
                                     .in2(cfblk105_out1),  // uint8
                                     .out1(cfblk216_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk293_process
      if (reset == 1'b1) begin
        for(cfblk293_t_1 = 32'sd0; cfblk293_t_1 <= 32'sd1; cfblk293_t_1 = cfblk293_t_1 + 32'sd1) begin
          cfblk293_reg[cfblk293_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk293_t_0_0 = 32'sd0; cfblk293_t_0_0 <= 32'sd1; cfblk293_t_0_0 = cfblk293_t_0_0 + 32'sd1) begin
            cfblk293_reg[cfblk293_t_0_0] <= cfblk293_reg_next[cfblk293_t_0_0];
          end
        end
      end
    end

  assign cfblk293_out1 = cfblk293_reg[1];
  assign cfblk293_reg_next[0] = cfblk216_out1;
  assign cfblk293_reg_next[1] = cfblk293_reg[0];



  assign dtc_out_9 = cfblk129_out1;



  assign cfblk89_out1 = dtc_out_9;



  assign cfblk192_out1 = cfblk89_out1 + cfblk293_out1;



  assign cfblk225_out1 = cfblk192_out1 - cfblk36_out1;



  assign cfblk33_out1 = cfblk225_out1 - cfblk301_out1;



  assign cfblk92_out1 = cfblk33_out1 + cfblk212_out1;



  assign cfblk214_out1 = cfblk92_out1;
  assign cfblk214_out2 = 8'b00000000;



  assign cfblk177_out1 = cfblk214_out1 + cfblk213_out1;



  assign dtc_out_10 = cfblk177_out1;



  assign cfblk77_out1 = dtc_out_10;



  assign dtc_out_11 = cfblk77_out1;



  assign cfblk41_out1 = dtc_out_11;



  assign cfblk64_out1 = cfblk41_out1;
  assign cfblk64_out2 = 8'b00000000;



  cfblk126 u_cfblk126 (.u(cfblk64_out2),  // uint8
                       .y(cfblk126_out1)  // uint8
                       );

  cfblk13 u_cfblk13 (.u(cfblk126_out1),  // uint8
                     .y(cfblk13_out1)  // uint8
                     );

  cfblk146 u_cfblk146 (.u(cfblk13_out1),  // uint8
                       .y(cfblk146_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk302_process
      if (reset == 1'b1) begin
        for(cfblk302_t_1 = 32'sd0; cfblk302_t_1 <= 32'sd1; cfblk302_t_1 = cfblk302_t_1 + 32'sd1) begin
          cfblk302_reg[cfblk302_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk302_t_0_0 = 32'sd0; cfblk302_t_0_0 <= 32'sd1; cfblk302_t_0_0 = cfblk302_t_0_0 + 32'sd1) begin
            cfblk302_reg[cfblk302_t_0_0] <= cfblk302_reg_next[cfblk302_t_0_0];
          end
        end
      end
    end

  assign cfblk302_out1 = cfblk302_reg[1];
  assign cfblk302_reg_next[0] = cfblk146_out1;
  assign cfblk302_reg_next[1] = cfblk302_reg[0];



  assign cfblk215_out1 = cfblk302_out1 + cfblk200_out1;



  DotProduct u_cfblk129_inst (.in1(cfblk215_out1),  // uint8
                              .in2(cfblk309_out1),  // uint8
                              .out1(cfblk129_out1)  // uint8
                              );

  cfblk173 u_cfblk173 (.u(cfblk129_out1),  // uint8
                       .y(cfblk173_out1)  // uint8
                       );

  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk11_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  assign cfblk217_out1 = (cfblk3_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk166_out1 = (cfblk217_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk153_out1 = cfblk166_out1 + cfblk173_out1;



  always @(cfblk153_out1, cfblk30_out1) begin
    cfblk247_div_temp = 9'b000000000;
    cfblk247_t_0_0 = 9'b000000000;
    if (cfblk30_out1 == 8'b00000000) begin
      cfblk247_out1 = 8'b11111111;
    end
    else begin
      cfblk247_t_0_0 = {1'b0, cfblk153_out1};
      cfblk247_div_temp = cfblk247_t_0_0 / cfblk30_out1;
      if (cfblk247_div_temp[8] != 1'b0) begin
        cfblk247_out1 = 8'b11111111;
      end
      else begin
        cfblk247_out1 = cfblk247_div_temp[7:0];
      end
    end
  end



  assign cfblk44_out1 = cfblk247_out1;
  assign cfblk44_out2 = 8'b00000000;



  cfblk231 u_cfblk231 (.u(cfblk44_out1),  // uint8
                       .y(cfblk231_out1)  // uint8
                       );

  assign cfblk164_out1 = cfblk231_out1 + cfblk259_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk307_process
      if (reset == 1'b1) begin
        for(cfblk307_t_1 = 32'sd0; cfblk307_t_1 <= 32'sd1; cfblk307_t_1 = cfblk307_t_1 + 32'sd1) begin
          cfblk307_reg[cfblk307_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk307_t_0_0 = 32'sd0; cfblk307_t_0_0 <= 32'sd1; cfblk307_t_0_0 = cfblk307_t_0_0 + 32'sd1) begin
            cfblk307_reg[cfblk307_t_0_0] <= cfblk307_reg_next[cfblk307_t_0_0];
          end
        end
      end
    end

  assign cfblk307_out1 = cfblk307_reg[1];
  assign cfblk307_reg_next[0] = cfblk164_out1;
  assign cfblk307_reg_next[1] = cfblk307_reg[0];



  assign cfblk209_out1 = cfblk307_out1 + cfblk182_out1;



  assign cfblk159_out1 = cfblk209_out1;
  assign cfblk159_out2 = 8'b00000000;



  assign cfblk37_out1 = cfblk159_out1 + cfblk37_const_val_1;



  cfblk11 u_cfblk11 (.u(cfblk37_out1),  // uint8
                     .y(cfblk11_out1)  // uint8
                     );

  assign cfblk254 = cfblk11_out1;

  assign Hdl_out = cfblk47_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

